
SELECT ("HELLO WORLD!");

# AIRTHMATIC OPERATORS

SELECT (45+60);
SELECT (400-200);

SELECT (450/50);

SELECT (100*20);

# MATHEMATICAL FUNCTION :-
# ROUND()
SELECT ROUND(12.96);

SELECT ROUND(12.489);

SELECT ROUND(45.123,1);

SELECT ROUND(9.99,1);

SELECT ROUND(12.856,1);

# MATHEMATICAL FUNCTION
-- 1. ROUND  :-   0.5
SELECT ROUND(12.456,2);

-- 2. CEIL  :-  ROUND UP
SELECT CEIL(45.11111);

-- 3. FLOOR  :- ROUND DOWN
SELECT FLOOR(12.99);


-- 4. SQRT  :- SHOW THE ROOT VALUE
SELECT sqrt(625);

-- 5. POWER
SELECT power(25,2);




-- 6. ABS :- IT IS USED TO CONVERT THE NEGATIVE NUMBER TO POSITIVE NUMBER
SELECT ABS(-1223);

-- 7. SIGN :- ITS SHOW THE DIRECTION OF THE NUMBER IF NUMBER IS NEGATIVE THEN SHOW -1 ELSE SHOW 1
SELECT SIGN(-456);
SELECT SIGN(1230);

-- 8. MOD (%) :- ITS SHOW THE REMINDER

SELECT MOD(52,7);

-- 9. SUM
-- 10. RAND()

SELECT RAND();


#  1 TO 100


SELECT ROUND(RAND()*100);

# 2000 TO 3000

SELECT ROUND(2000+RAND()*1000);

#---------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------\

# Mathematical function

-- floor
-- round
-- ceil


--  abs
-- sign

-- Text Function

# select ("Data sceince");

SELECT UPPER("data science");
select lower("SCIENCE");

SELECT TRIM("   DATA    SCIENCE    ");

SELECT LEFT("MACHINE LEARNING",3);

SELECT RIGHT("DATA SCIENCE",2);

-- UPPER() :- IT IS USED TO CONVERT THE DATA IN CAPITAL LETTER
-- LOWER()  :- IT IS USED TO CONVERT THE DATA IN SMALL LETTER
-- TRIM()   :- IT IS USED TO DELETE THE EXTRA SPACE FROM STARTING AND ENDING OF THE TEXT.
-- LEFT()   :- IT IS USED TO EXTRACT THE DATA FROM STARTING OF THE TEXT
-- RIGHT()  :- IT IS USED TO EXTRACT THE DATA FROM ENDING OF THE TEXT
-- SUBSTR()  :- IT IS USED TO EXTRACT THE DATA FROM MID
-- MID()     :- IT IS ALSO USED TO EXTRACT THE DATA FROM MID
-- INSTR()   :- IT IS USED TO FIND THE POSITION OF THE ALPHABET FROM THE TEXT.
-- LENGTH()     :- IT IS USED TO SHOW THE LENGTH OF THE TEXT.
-- CONCAT()  :- IT IS USED TO COMBINE THE TWO OR MORE THAN TWO TEXT.
-- CONCAT_WS() :- IT IS USED TO COMBINE THE THE TWO OR MORE THAN TWO TEXT WITH SEPERATOR.
-- REVERSE()   :- IT IS USED TO REVERSE THE DATA
-- REPLACE()  :-  IT IS USED TO REPLACE THE FROM OLD TEXT TO NEW TEXT.

----------------------------------------------------------------------------------------------
SELECT substr("STRACTURED",3,3);
SELECT MID("SCIENCE",2,3);
SELECT instr("SCIENCE","I");

# EXTRACT THE FIRST NAME FROM THE TEXT
#         "ROHIT SHARMA"
SELECT LEFT("ROHIT SHARMA",INSTR("ROHIT SHARMA"," "));

# LAST NAME FROM THE TEXT

SELECT length("PRINCE SHARMA");
SELECT LENGTH("ROHIT RAJ");


SELECT right("ROHIT RAJ",LENGTH("ROHIT RAJ")-INSTR("ROHIT RAJ"," "));




SELECT length("DATA SCIENCE");

SELECT concat("DATA"," ","SCIENCE");
SELECT CONCAT("FIRST"," ","SECOND"," ","THIRD");

SELECT concat_ws("------","FIRST","SECOND","THIRD");


SELECT REVERSE("SCIENCE");

SELECT REPLACE("SCIENCE","E","*");


# 1. FIND THE LENGTH OF THE TEXT WITHOUT SPACE
#		"WELCOME TO SQL"
        
SELECT LENGTH(REPLACE("WELCOME TO SQL"," ",""));
        
# 2. SHOW THE NAME IN PROPER FORMAT
#		"ARYAN SHARMA"
        
SELECT LEFT("ARYAN SHARMA",1);
SELECT LOWER(RIGHT("ARYAN SHARMA",LENGTH("ARYAN SHARMA")-1));


SELECT CONCAT(LEFT("ARYAN SHARMA",1),
LOWER(RIGHT("ARYAN SHARMA",LENGTH("ARYAN SHARMA")-1)));


SELECT upper(LEFT("ram",1));
select right("ram",length("ram")-1);

select concat(upper(LEFT("ram",1)),
right("ram",length("ram")-1)) as Proper;

#Aliyas :- Nick name of any Headers

#  Date and Time function :-

SELECT NOW();
SELECT curdate();
SELECT current_date();
SELECT curtime();
SELECT current_time();

SELECT NOW();

SELECT monthname(NOW());
SELECT MONTH(NOW());


SELECT DAYNAME(NOW());
SELECT day(NOW());


SELECT QUARTER(NOW());



        
        
# 3. FROM THE TEXT SHOW FIRST AND LAST TWO ALPHABET 
#	"PROJECT"   
#OUTPUT :- PRCT

# 4. REVERSE FIRST THREE ALPHABET FROM THE TEXT
#	"MANAGER"
#OUTPUT :- NAMAGER

SELECT REVERSE(LEFT("MANAGER",3));
SELECT MID("MANAGER",4,500);
SELECT CONCAT(REVERSE(LEFT("MANAGER",3)),MID("MANAGER",4,500));

# -----------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------

# Date and Time Function

SELECT NOW();

SELECT DAYNAME("2024-05-13");

-- DAYNAME() :- 
-- MONTHNAME() :-
-- DAY :-  nUMBER OF DAY
-- MONTH :- NUMBER OF MONTH
-- YEAR :- yEAR

-- -----------------------------------------------------------------------------------------
# adddate() :-  WITH THE HELP OF THIS FUNCTION WE CAN ADD THE DATE IN MONTH DAY,
# YEAR OR QUARTER ACCORDING TO USER.
# "YYYY-MM-DD"
			
SELECT ADDDATE(NOW(), INTERVAL 3 MONTH);
SELECT ADDDATE("2023-02-05",INTERVAL 15 DAY);
SELECT ADDDATE("2023-02-05",INTERVAL 3 WEEK);
SELECT ADDDATE(curdate(),INTERVAL 10 WEEK);

#-----------------------------------------------------------
# HOW TO CREATE A DATABASE AND TABLE
#-----------------------------------------------------------
CREATE DATABASE SQL_BATCH;
SHOW DATABASES;

DROP DATABASE SQL_BATCH;

USE PRINCE;

# HOW TO CREATE A TABLE IN SQL


CREATE TABLE STUDENT2(ROLL_NO INT,
ST_NAME VARCHAR(255),
SUBJECT VARCHAR(100),
MARKS float);

SELECT * FROM STUDENT2;


# HOW TO DELTE THE TABLE
DROP TABLE STUDENT2;

SELECT * FROM STUDENT2;
SELECT * FROM STUDENT;

-- cREATE A TABLE NAME OF SALES
-- COLUMN NAME SHOULD BE
-- ID
-- PERSON
-- SALE
-- AREA

SELECT * FROM SALES;

CREATE TABLE SALES2(ID INT,PERSON VARCHAR(255),
SALE FLOAT,AREA VARCHAR(100));

SELECT * FROM SALES2;

INSERT INTO SALES2(ID,PERSON,SALE,AREA)
VALUES(100,"SURAJ SINGH",500,"EAST");

SELECT * FROM SALES2;

INSERT INTO SALES2(ID,PERSON,SALE,AREA)
VALUES(101,"RAHUL JAIN",1000,"WEST"),
(102,"YOGESH",2000,"NORTH"),
(103,"RAKESH",5000,"SOUTH");

SELECT * FROM SALES2;

DROP TABLE SALES2;

USE PRINCE;


SELECT * FROM EMPLOYEE;

# WHERE CLAUSE :- IT IS IUSED TO FILTER THE DATA ACCORDING TO CONDITION


SELECT * FROM EMPLOYEE WHERE DEPARTMENT = "DATA ANALYST";

-- TEXT FUNCTION
-- MATHEMATICAL FUNCTION
-- DATE AND TIME


SELECT * FROM EMPLOYEE;
# RETRIVE THE DATA FROM EMP TABLE SHOW THE DEPARTMENT AND LENGTH OF THE DEPARTMENT

SELECT DEPARTMENT,length(DEPARTMENT) AS LENGTHS FROM EMPLOYEE;

SELECT * FROM EMPLOYEE;

SELECT TRIM(EMP_NAME) AS EMP_NAME FROM EMPLOYEE;

# EXTRACT THE FIRST NAME OF EMPLOYEE

SELECT * FROM EMPLOYEE;

# LAST NAME FROM THE EMP_NAME

-- WRITE A QUERY TO SHOW THE BONUS 
-- BONUS IS SALARY OF 20%
-- EMP_NAME,SALARY,BONUS

SELECT EMP_NAME,SALARY,
		SALARY*0.2 AS BONUS
				FROM EMPLOYEE;


SELECT * FROM employee;

# SHOW THE DETAILS OF EMPLOYEE WHOSE AGE IS LESS THEN 23
SELECT * FROM EMPLOYEE WHERE AGE<23;

# WRITE A QUERY TO COMBINE THREE COLUMN WITH SEPERATOR (",")
# COLUMN SHOULD BE EMP_NAME,AGE, AND SALARY

SELECT concat_ws(",",EMP_NAME,AGE,SALARY) AS COMBINE
FROM EMPLOYEE;
 

# MASK THE STARTING OF SIX NUMBER FROM CONTACT NUMBER ?

SELECT * FROM EMPLOYEE;
# XXXXXX5458


SELECT 
		REPLACE(`CONTACT NUMBER`,LEFT(`CONTACT NUMBER`,6),"XXXXXX") AS MASK
				FROM EMPLOYEE;
                
                
SELECT concat("XXXXXX",RIGHT(`CONTACT NUMBER`,4)) AS MASK
FROM EMPLOYEE;                

SELECT * FROM EMPLOYEE;

# WRITE A QUERY TO FETCH THE DATA OF EMPLOYEE WHERE DEPARTMENT IS NOT GIVEN ?

SELECT * FROM EMPLOYEE WHERE DEPARTMENT = "";

# SHOW THE DATA WHERE DEPARTMENT IS GIVEN

SELECT * FROM EMPLOYEE WHERE DEPARTMENT != "";

-- -----------------------------------
# lOGICAL OPERATORS
# AND, OR,  BETWEEN


# WRITE A QUERY TO SHOW THE DATA WHOSE CITY IS PATNA AND DEPARTMENT IS DATA ANALYST

SELECT * FROM EMPLOYEE WHERE CITY ="pATNA" AND DEPARTMENT = "DATA ANALYST";

# WRITE A QUERY TO SHOW THE DATA WHOSE DEPARTMENT IS DATA ANALYST AND DATA SCIENTIST

SELECT * FROM EMPLOYEE WHERE DEPARTMENT  = "DATA ANALYST" OR DEPARTMENT="DATA SCIENTIST";

# SHOW THE DATA WHOSE AGE BETWEEN 20 TO 30

SELECT * FROM EMPLOYEE WHERE AGE BETWEEN 20 AND 30;

SELECT * FROM EMPLOYEE WHERE AGE>=20 AND AGE<=30;

# SHOW THE DATA WHOSE DEPARTMENT IS MIS ANALYST AND AGE BETWEEN 35 TO 40

# WRITE A QUERY TO SHOW THE DATA WHOSE SI NUMBER IS EVEN
SELECT * FROM EMPLOYEE WHERE SI_NO%2=0;

SELECT * FROM EMPLOYEE WHERE MOD(SI_NO,2)=0;

# WRITE A QUERY TO SHOW THE DATA WHOSE SI NUMBER IS ODD

# WRITE A QUERY TO SHOW THE DATA WHOSE NAME OF LENGTH IS LESS THAN 10

SELECT * FROM EMPLOYEE WHERE length(TRIM(EMP_NAME))<10;

# WRITE A QUERY TO FETCH THE DATA WHOSE CITY IS PATNA AND NOIDA AND AGE IS LESS THAN 30

SELECT * FROM EMPLOYEE WHERE 
(CITY ="PATNA" OR CITY = "NOIDA") AND AGE < 30;

--  SHOW THE NAME ONLY WHOSE NAME STARTSWITH "A"
SELECT EMP_NAME FROM EMPLOYEE WHERE LEFT(TRIM(EMP_NAME),1)="A";



# SHOW NAME OF EMPLOYEE WHOSE NAME OF SECOND ALPHABET IS "R"

SELECT EMP_NAME FROM EMPLOYEE WHERE MID(TRIM(EMP_NAME),2,1)="R";

SELECT  EMP_NAME FROM EMPLOYEE WHERE RIGHT(LEFT(TRIM(EMP_NAME),2),1) = "R";

# SHOW THE NAME OF EMPLOYEE WHOSE NAME START AND ENDSWITH "K" AND "A" ?

SELECT EMP_NAME FROM EMPLOYEE WHERE LEFT(TRIM(EMP_NAME),1) ="K" 
	AND RIGHT(TRIM(EMP_NAME),1)="A";
    
#SHOW THE DATA WHOSE SALARY BETWEEN 20K TO 30K AND AGE BETWEEN 25 TO 30 IN DATA ANALYST

SELECT * FROM EMPLOYEE WHERE DEPARTMENT = "DATA ANALYST" AND
		SALARY BETWEEN 20000 AND 30000 AND AGE BETWEEN 25 AND 30;
        
# MEMBERSHIP OPERATORS :
# 1. IN    2. NOT IN

#SHOW THE DATA WHOSE CITY IS PATNA ,NOIDA AND DELHI

SELECT * FROM EMPLOYEE WHERE CITY = "PATNA" OR CITY = "NOIDA" OR CITY = "JAIPUR";
SELECT * FROM EMPLOYEE WHERE CITY IN ("PATNA","NOIDA","JAIPUR");

#SHOW DATA OF ALL EMPLOYEE BUT EXCLUDE TWO DEPARTMENT "DATA SCIENTIST" AND "DATA ANALYST"


#-------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
use prince;
select * from employee;
select * from emp;

# show the name of employee whose name startswith Vowel sound

select emp_name from employee where 
left(trim(emp_name),1) in ("a","e","i","o","u");

# show the name of employee whose name endswith Consonentes

SELECT EMP_NAME FROM EMPLOYEE 
WHERE RIGHT(TRIM(EMP_NAME),1) NOT IN ("a","e","i","o","u");

# Aggreage Function
# Nested Query or Sub Query


# SHOW THE NAME OF EMPLOYEE WHERE GIVEN FIRST MID AND LAST NAME 

SELECT EMP_NAME FROM EMP WHERE
length(TRIM(EMP_NAME))-LENGTH(REPLACE(trim(EMP_NAME)," ",""))=2;



SELECT EMP_NAME,LENGTH(EMP_NAME) AS WT,LENGTH(TRIM(EMP_NAME)) AS WITH_TRIM,
REPLACE(TRIM(EMP_NAME)," ","") AS NAME_,length(REPLACE(TRIM(EMP_NAME)," ","")),
LENGTH(TRIM(EMP_NAME))-length(REPLACE(TRIM(EMP_NAME)," ",""))
 FROM EMP;

# AGGREAGATE FUNCTION : IT IS USED TO CALUCULATE THE DATA IN A SINGLE CELL
-- 1 SUM
-- 2. COUNT
-- 3. AVG
-- 4. MIN
-- 5. MAX

# SHOW THE TOTAL NUMBER OF EMPLOYEE
SELECT COUNT(*) AS TOTAL_EMP FROM EMP;

# SHOW TOTAL EXPENCE OF COMPANY
SELECT SUM(SALARY) AS TOTAL_EXP FROM EMP;

# SHOW THE MAXIMUM AGE OF EMPLOYEE
SELECT MAX(AGE) AS MAX_AGE FROM EMP;


# SHOW THE MINIMUM AGE OF EMPLOYEE
SELECT MIN(AGE) AS MIN_aGE FROM EMP;

# SHOW THE AVG SALARY OF EACH EMPLOYEE
SELECT AVG(SALARY) AS AVG_SALARY FROM EMP;



# COUNT TOTAL NUMBER OF UNIQUE DEPARTMENT

# DISTINCT :- IT IS USED TO SHOW THE UNIQUE values
SELECT COUNT(DISTINCT DEPARTMENT) AS UNIQUE_CITY FROM EMP;

# COUNT TOTAL NUMBER OF UNIQUE CITY
SELECT COUNT(distinct CITY) FROM EMP;


# FIND THE TOTAL SALARY IN DATA ANALYST
SELECT SUM(SALARY) FROM employee WHERE DEPARTMENT = "DATA ANALYST"; 

# SHOW AVERAGE AGE OF EMPLOYEE WHO LIVES IN PATNA
SELECT AVG(AGE) FROM EMP WHERE CITY = "PATNA";

#COUNT TOTAL NUMBER OF DUPLICATE VALUES IN CITY
SELECT COUNT(*)-COUNT(DISTINCT CITY) AS DUPLCATES FROM EMP;


# SHOW THE 120% OF AVERAGE SALARY IN WHOLE NUMBER ?

SELECT ROUND(AVG(SALARY)*1.2) AS SAL FROM EMP;   #52136

# NESTED QUERY OR SUB QUERY :- 

SELECT * FROM EMP;

# SHOW THE DETAILS OF THE EMPLOYEE WHOSE AGE IS MAXIMUM


SELECT MAX(AGE) FROM EMP;

SELECT * FROM EMP WHERE AGE = (SELECT MAX(AGE) FROM EMP);


SELECT * FROM EMP WHERE
		AGE = (SELECT MIN(AGE) FROM EMP);


-- SHOW THE DETAILS OF THE EMPLOYEE WHOSE SALARY IS GREATER THAN AVERAGE SALARY
SELECT * FROM EMP WHERE SALARY > (SELECT AVG(SALARY) FROM EMP);

-- SHOW THE DETAILS OF THE EMPLOYEE WHOSE AGE IS LESS THAN AVERAGE AGE
SELECT * FROM EMP WHERE AGE < (SELECT AVG(AGE) FROM EMP);

-- COUNT TOTAL NUMBER OF EMPLOYEE WHOSE SALARY IS LESS THAN AVERAGE SALARY
SELECT COUNT(*) FROM EMP WHERE SALARY < (SELECT AVG(SALARY) FROM EMP);

-- COUNT TOTAL NUMBER OF EMPLOYEE WHOSE AGE IS GREATER AVERAGE AGE
SELECT COUNT(*) FROM EMP WHERE AGE > (SELECT AVG(AGE) FROM EMP);

-- SHOW THE DETAILS OF EMPLOYEE WHOSE SALARY IS MAXIMUM
SELECT * FROM EMP WHERE SALARY = (SELECT MAX(SALARY) FROM EMP);


# WRTIE A QUEERY TO SHOW THE DATA WHOSE SALARY BETWEEEN AVERAGE SALARY OF 50% AND AVERAGE SALARY OF 80%

SELECT * FROM EMP WHERE 
			SALARY BETWEEN (SELECT AVG(SALARY)*0.5 FROM EMP)  
				AND 
					(SELECT AVG(SALARY)*0.8 FROM EMP);



use prince;
SELECT * FROM EMP;
# ---------------------------------------------------------------
# ORDER BY CLAUSE :- IT IS USED TO SORT THE DATA ASCENDING OR 
# DESCENDING ORDER ACCORDING TO COLUMNS

SELECT * FROM EMPLOYEE;


# SHOW THE DETAILS OF THE EMPLOYEE WHOSE AGE IS MAXIMUM.

SELECT * FROM EMP WHERE
				AGE = (SELECT MIN(AGE) FROM EMP);
             
#ASCENDING ORDER              
SELECT * FROM EMP ORDER BY AGE;

# DESCENDING ORDER
SELECT * FROM EMP ORDER BY AGE DESC;

SELECT * FROM EMP ORDER BY TRIM(EMP_NAME) DESC;

-- SORT THE DATA BASE OF NAME IN ASCENDING ORDER AND WHEN ALPHABET WILL TIE THEN SORT 
-- THE DATA BASE OF AGE

SELECT * FROM EMP ORDER BY LEFT(TRIM(EMP_NAME),1),AGE DESC;


-- SORT THE DEPARTMENT IN DESCENDING ORDER WHEN DEPARTMENT WILL TIE
-- THEN SORT THE SALARY IN DESCENDING ORDER

SELECT * FROM EMP ORDER BY DEPARTMENT DESC,SALARY DESC;

-- SORT THE CITY IN ASCENDING ORDER IF CITY OF FIRST ALPHABET WILL TIE THEN 
-- SORT THE CITY IN DESCINDING ORDER BASE OF LAST ALPHABET.

SELECT * FROM EMP ORDER BY LEFT(CITY,1) ,RIGHT(CITY,1) DESC;


#  LIMIT :- IT IS USED TO EXTRACT THE DATA FROM THE TABLE.
#  IT CAN BE FROM START OR FROM MID 

# FIRST
SELECT * FROM EMP LIMIT 5;

# MID
SELECT * FROM EMP LIMIT 4,15;


# SHOW THE TOP 5 EMPLOYEE BASE OF SALARY
SELECT * FROM EMP ORDER BY SALARY DESC LIMIT 5;

# SHOW THE BOTTOM 5 EMPLOYEE BASE OF SALARY
SELECT * FROM EMP ORDER BY SALARY LIMIT 5;

# SHOW THE TOP 5 EMPLOYEE WHOSE AGE MINIMUM
SELECT * FROM EMP ORDER BY AGE LIMIT 5;

# SHOW THE TOP 5 EMPLOYEE WHOSE AGE IS MAXIMUM
SELECT * FROM EMP ORDER BY AGE DESC LIMIT 5;

# SORT THE DATA OF EMPLOYEE BASE OF EMP_NAME LENGTH
SELECT * FROM EMP ORDER BY LENGTH(TRIM(EMP_NAME)); 


# ALTER :- DDL :- DATA DEFINITION LANGUAGE
#  ADD :- WITH THE HELP OF THIS COMMAND WE CAN ADD THE COLUMN IN TABLE
#  DELETE :- IT IS USED TO DELETE THE COLUMN FROM TABLE.

ALTER TABLE EMP ADD COLUMN BONUS FLOAT;
SELECT * FROM EMP;

ALTER TABLE EMP DROP column BONUS;

SELECT * FROM EMP;

# ADD TWO COLUMN PROFIT AND LOSS

ALTER TABLE EMP ADD COLUMN PROFIT INT,ADD COLUMN LOSS FLOAT;

# DELETE BOTH COLUMN PROFIT AND LOSS
ALTER TABLE EMP DROP PROFIT,DROP LOSS;
SELECT  * FROM EMP;

# ADD A NEW COLUMN OF BONUS BEFORE THE SALARY
ALTER TABLE EMP ADD COLUMN BONUS INT AFTER DEPARTMENT;
SELECT * FROM EMP;
# ADD A NEW COLUMN LOSS AFTER THE CITY

# ADD A NEW COLUMNS OF STATUS BEFORE THE si_NO
ALTER TABLE EMP ADD COLUMN STATUS TEXT FIRST;
SELECT * FROM EMP;


use prince;
select * from emp;

# show details of employee whose age is maximum in data analyst

select max(age) from emp where department = "data analyst";
select * from emp where age = 
(select max(age) from emp where department = "data analyst") and
department = "data analyst";

# show the details of employee whose salary is minimum in data scientist
# show the name of employee in patna whose salary is greater than average salary


# Rename the Column from contact number to pbone_number
# add two new column in table first_name before the age and last name after the first name
#  mask the 4 Number from the end in Contact Number

select concat(left(phone_no,4),"XXXXXX") as mask from emp;


#     details
#  Aman sing(40)
# mohit jain(63)

select
concat(emp_name,"(",age,")") as details
 from emp;

select concat_ws("|",emp_name,age,"") as details
from emp;



# Columns add
# delete column
select * from emp;

#alter table emp drop column description;

ALTER TABLE EMP RENAME COLUMN EMP_NAME TO EMPLOYEE_NAME;

SELECT * FROM EMP;

-- RENAME THREE COLUMN
-- DOJ TO DATE OF JOIN
-- CITY TO STATE
-- DEPARTMENT TO DEPT

#----------------------------------------------
# HOW TO CHECK THE DATA TYPE IN SQL
#---------------------------------------------

DESCRIBE EMP;

ALTER TABLE EMP modify AGE TEXT;

DESCRIBE EMP;

# UNION :- IT IS USED TO COMBINE THE TWO OR MORE THEN TWO QUERY AND SHOW THE UNIQUE VALUES
# UNION ALL:-IT IS USED TO COMBINE THE TWO OR MORE THAN TWO QUERY AND SHOW THE ALL VALUES 
#			WITH DUPLICATES.

SELECT * FROM EMP WHERE AGE  = 25
UNION
SELECT * FROM EMP WHERE AGE  = 18;

SELECT DISTINCT(CITY) FROM EMP
UNION
SELECT DISTINCT(CITY) FROM EMP;

SELECT AGE,DEPARTMENT,CITY FROM EMP
UNION
SELECT AGE,DEPARTMENT,CITY FROM EMP;

# FETCH THE DATA OF DATA ANALYST WHOSE SALARY IS MAXIMUM AND MINIMUM 

# FIND THE THIRD HIGHEST SALARY OF EMPLOYEE

SELECT SALARY FROM EMP ORDER BY SALARY DESC LIMIT 2,1;


# WRITE A SQL QUERY TO SHOW THE SECOND HIGHEST SALARY

SELECT SALARY FROM EMP ORDER BY SALARY DESC LIMIT 1,1;
-- --------------------------------------------------
-- ALTER
-- UPDATE
-- DELETE
-- --------------------------------------------------

USE PRINCE;
SELECT * FROM EMP;

# CREATE A COLUMN OF MASK
# DELETE DESCRIPTION COLUMN FROM EMP


# UPDATE :- IT IS USED TO ADD THE VALUE IN PARTICULAR CELL ACCORDING TO CONDITION.

SELECT * FROM EMP;

UPDATE EMP SET EMP_NAME = "RAMAN SINGH" WHERE SI_NO=1001;
-- ----------------------
SET SQL_SAFE_UPDATES=0;
-- ----------------------

SELECT * FROM EMP;

#ADD CONTACT NUMBER WITH MASKED LIKE  :-    XXXXXX2356
ALTER TABLE EMP ADD COLUMN MASK TEXT;
SELECT * FROM EMP;


SELECT CONCAT("XXXXXX",RIGHT(PHONE_NO,4)) AS MASK FROM EMP;





























 

select * from emp;
































































































 











































































